library(ggplot2)
fsize=16
p1 <- ggplot(fb1cw, aes(x=Average.cob.weight, color=as.factor(quadrant))) +
facet_grid(block ~ nitrogen) +
geom_histogram(bins=30) +
#labs(y=NULL, fill="Traits") + theme_bw() +
theme(#axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.text=element_text(size=12),
axis.title=element_text(size=fsize, face="bold"),
legend.title = element_text(size=fsize, face="bold"),
legend.text = element_text(size=fsize),
strip.text = element_text(size = fsize, face = "bold")) +
xlab("Average.cob.weight") +
ylab("Frequency")
p1
fb <- read.csv("../cache/fb2019_meta_replaced_check.csv")
fb$quadrant <- floor(fb$row/1000)
#View(fb)
cw <- read.csv("../data/phenotyping_2019_semra_cobwidth_raw.csv")
table(cw$Number.of.ears)
View(cw)
cw$Average.cob.weight <- as.numeric(as.character(cw$Average.cob.weight))
cw$row <- gsub("-.*", "", cw$Row.number)
fb1 <- subset(fb, row %% 2 == 1)
#View(fb1)
## remove duplicated rows
idx <- duplicated(cw$row)
sub1 <- subset(cw, row %in% cw[idx,]$row)
cw1 <- subset(cw, !(row %in% cw[idx,]$row))
dim(cw1)
#View(cw1)
fb1cw <- merge(fb1, cw1[, c("row", "Average.cob.weight")], by="row", all.x=TRUE)
#View(fb1cw)
# Quality checking
# how many of the non-check plots have no data
nonch <- subset(fb1cw, !(Genotype %in% "Check"))
sum(is.na(nonch$Average.cob.weight))
nonch_data <- subset(nonch, !is.na(Average.cob.weight))
t.test(subset(fb1cw, quadrant %in% "1")$Average.cob.weight, subset(fb1cw, quadrant %in% "2")$Average.cob.weight, na.rm=TRUE)
t.test(subset(fb1cw, quadrant %in% "3")$Average.cob.weight, subset(fb1cw, quadrant %in% "4")$Average.cob.weight, na.rm=TRUE)
write.table(fb1cw[, -16], "../cache/pheno2019_cob_weight.csv", sep=",", row.names = FALSE, quote=FALSE)
write_xlsx(fb1cw, "../cache/pheno2019_cob_weight.xlsx")
write.table(subset(fb1cw[, -16], nitrogen %in% "+N"), "../cache/pheno2019_cob_weight_withN.csv", sep=",", row.names = FALSE, quote=FALSE)
write.table(subset(fb1cw[, -16], nitrogen %in% "-N"), "../cache/pheno2019_cob_weight_noN.csv", sep=",", row.names = FALSE, quote=FALSE)
# how many of the non-check plots have no data
nonch <- subset(fb1cw, !(Genotype %in% "Check"))
sum(is.na(nonch$Average.cob.weight))
nonch_data <- subset(nonch, !is.na(Average.cob.weight))
t.test(subset(fb1cw, quadrant %in% "1")$Average.cob.weight, subset(fb1cw, quadrant %in% "2")$Average.cob.weight, na.rm=TRUE)
t.test(subset(fb1cw, quadrant %in% "3")$Average.cob.weight, subset(fb1cw, quadrant %in% "4")$Average.cob.weight, na.rm=TRUE)
library(ggplot2)
fsize=16
p2 <- ggplot(fb1cw, aes(x=Average.cob.weight, color=as.factor(quadrant))) +
facet_grid(block ~ nitrogen) +
geom_histogram(bins=30) +
#labs(y=NULL, fill="Traits") + theme_bw() +
theme(#axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.text=element_text(size=12),
axis.title=element_text(size=fsize, face="bold"),
legend.title = element_text(size=fsize, face="bold"),
legend.text = element_text(size=fsize),
strip.text = element_text(size = fsize, face = "bold")) +
xlab("Average.cob.weight") +
ylab("Frequency")
p2
### first, we need to organize both data set. (they need to have the same columns)
cob_weight_2019_N <- read.csv("../cache/pheno2019_cob_weight_withN.csv")
cob_weight_2018_N <- read.csv("../cache/pheno2018_cob_weight_withN.csv")
#View(coblength_2019_N)
#View(coblength_2018_N)
cob_weight_18_19_N <- rbind(cob_weight_2018_N, cob_weight_2019_N)
#View(cobwidth_18_19)
write.table(cob_weight_18_19_N, "../cache/cob_weight_2018_2019_N.csv", sep=",", row.names = FALSE, quote=FALSE)
cob_weight_2018_noN <- read.csv ("../cache/pheno2018_cob_weight_noN.csv")
cob_weight_2019_noN <- read.csv ("../cache/pheno2019_cob_weight_noN.csv")
cob_weight_18_19_noN <- rbind (cob_weight_2018_noN, cob_weight_2019_noN)
write.table(cob_weight_18_19_noN, "../cache/cob_weight_2018_2019_noN.csv", sep=",", row.names = FALSE, quote=FALSE)
library(lme4)
#p1 <- read.csv("cache/pheno2019_cw_withN.csv")
get_BLUP(data = cob_weight_18_19_N, model = Average.cob.weight ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) +
(1| Genotype:year), which.factor = "Genotype",
outfile = "../cache/BLUP_RESULTS/cob_weight_BLUP_2018_2019_withN_lme4.csv")
#df1 <- read.csv("cache/BLUP/CW_BLUP-2019_withN.csv")
nit <- read.csv("../cache/BLUP_RESULTS/cob_weight_BLUP_2018_2019_withN_lme4.csv")
#cor.test(df1$BLUPs, df2$value)
#plot(df1$BLUPs, df2$value)
#noN
#p2 <- read.csv("cache/pheno2019_cw_noN.csv")
get_BLUP(data = cob_weight_18_19_noN, model = Average.cob.weight ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) + (1| Genotype:year), which.factor = "Genotype",
outfile = "../cache/BLUP_RESULTS/cob_weight_BLUP_2018_2019_noN_lme4.csv")
nonit <- read.csv("../cache/BLUP_RESULTS/cob_weight_BLUP_2018_2019_noN_lme4.csv")
#write.table(fb18[, -16:-17], "cache/fb2018_meta.csv", sep=",", row.names = FALSE, quote=FALSE)
#cor.test(df1$value[c(2:215)], df2$value[c(2:215)])
#plot(df1$value[c(2:215)], df2$value[c(2:215)])
t.test(nit$value, nonit$value, alternative="two.sided", var.equal=FALSE)
hist(nit$value, breaks=25, col="#6495ed", xlab="cob weight in +N in 2018-2019", ylab="freq", main="histogram")
hist(nonit$value, breaks=25, col="#c6e2ff", xlab="cob weight in -N in 2018-2019", ylab="freq", main="histogram")
t.test(nit$value, df2$value)
dim(df2)
t.test(nit$value, nonit$value, alternative="two.sided", var.equal=FALSE)
hist(nit$value, breaks=25, col="#6495ed", xlab="cob weight in +N in 2018-2019", ylab="freq", main="histogram")
hist(nonit$value, breaks=25, col="#c6e2ff", xlab="cob weight in -N in 2018-2019", ylab="freq", main="histogram")
t.test(nit$value, nonit$value)
dim(df2)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
#install.packages("readxl")
library(tidyverse)
library(readxl)
ph_2018 <- read.csv("../data/phenotyping_2018_semra_all_traits.csv")
#View(ph_2018)
names(ph_2018)
ph_2018 %>%
mutate(pollinationtype = NA,
pollinationtype=ifelse(grepl("@",Genotype),"self",pollinationtype),
pollinationtype=ifelse(grepl("op",tolower(Genotype)),"open",pollinationtype),
Genotype=gsub("op","",tolower(Genotype)),
Genotype=gsub("@","",tolower(Genotype)),
Genotype = str_squish(Genotype)) %>%
arrange(Genotype) %>%
filter(pollinationtype == "open") %>%
rename(genotype = Genotype,
year = Year) -> ph_2018.b
ph_2018.b %>%
select(genotype, Average.cob.length, Replication, Row) %>%
rename(AverageCobLength = `Average.cob.length`) %>%
rename(row = `Row`)%>%
arrange(genotype) %>%
mutate(year = 2018) %>%
arrange(genotype) ->  cobl_2018
# group_by(genotype) %>%
# summarise(meanAvgCob2018 = mean(cobLength2018),
#           sdAvgCob2018 = sd(cobLength2018))
#View(ph_2018.b)
colnames(ph_2018.b)
ph_2018.b %>%
rename(row = Row)
colnames(ph_2018.b)[colnames(ph_2018.b) == "Row"] <- "row"
colnames(ph_2018.b)[colnames(ph_2018.b) == "genotype"] <- "Genotype"
head(ph_2018.b)
unique(ph_2018.b$Genotype)
ph_2018.b$meancw <- apply(ph_2018.b[, c("Cob.length.1", "Cob.length.2", "Cob.length.3", "Cob.length.4", "Cob.length.5", "Cob.length.6", "Cob.length.7", "Cob.Length.8")], 1, function(x){mean(x, na.rm=TRUE)})
ph_2018.b$Average.cob.length <- as.numeric(as.character(ph_2018.b$Average.cob.length))
plot(ph_2018.b$Average.cob.length, ph_2018.b$meancw)
idx <- which(round(ph_2018.b$Average.cob.length, 1) != round(ph_2018.b$meancw, 1))
cw[idx,]
#meta data for 2018
fb <- read.csv("../cache/fb2018_meta.csv")
fb$quadrant <- floor(fb$row/1000)
#View(fb)
#cw$row <- gsub("-.*", "", cw$Line.number)
#fb1 <- subset(fb, row %% 2 == 1)
#ph_2018.b$Row <- gsub("-.*", "", cw$Line.number)
fb1 <- subset(fb, row %% 2 == 1)
## remove duplicated rows
idx <- duplicated(ph_2018.b$row)
sub1 <- subset(ph_2018.b, row %in% ph_2018.b[idx,]$row)
cw1 <- subset(ph_2018.b, !(row %in% ph_2018.b[idx,]$row))
fb1cw <- merge(fb1, cw1[, c("row", "meancw")], by="row", all.x=TRUE)
View(fb1cw)
colnames(fb1cw)[colnames(fb1cw) == "pedigree"] <- "Pedigree"
colnames(fb1cw)[colnames(fb1cw) == "genotype"] <- "Genotype"
write.table(fb1cw[, -6], "../cache/pheno2018_coblength.csv", sep=",", row.names = FALSE, quote=FALSE)
write_xlsx(fb1cw, "../cache/pheno2018_cob_length.xlsx")
write.table(subset(fb1cw[, -6], nitrogen %in% "+N"), "../cache/pheno2018_cob_length_withN.csv", sep=",", row.names = FALSE, quote=FALSE)
write.table(subset(fb1cw[, -6], nitrogen %in% "-N"), "../cache/pheno2018_cob_length_noN.csv", sep=",", row.names = FALSE, quote=FALSE)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
#install.packages("readxl")
library(tidyverse)
library(readxl)
ph_2018 <- read.csv("../data/phenotyping_2018_semra_all_traits.csv")
#View(ph_2018)
names(ph_2018)
ph_2018 %>%
mutate(pollinationtype = NA,
pollinationtype=ifelse(grepl("@",Genotype),"self",pollinationtype),
pollinationtype=ifelse(grepl("op",tolower(Genotype)),"open",pollinationtype),
Genotype=gsub("op","",tolower(Genotype)),
Genotype=gsub("@","",tolower(Genotype)),
Genotype = str_squish(Genotype)) %>%
arrange(Genotype) %>%
filter(pollinationtype == "open") %>%
rename(genotype = Genotype,
year = Year) -> ph_2018.b
ph_2018.b %>%
select(genotype, Average.cob.length, Replication, Row) %>%
rename(AverageCobLength = `Average.cob.length`) %>%
rename(row = `Row`)%>%
arrange(genotype) %>%
mutate(year = 2018) %>%
arrange(genotype) ->  cobl_2018
# group_by(genotype) %>%
# summarise(meanAvgCob2018 = mean(cobLength2018),
#           sdAvgCob2018 = sd(cobLength2018))
#View(ph_2018.b)
colnames(ph_2018.b)
ph_2018.b %>%
rename(row = Row)
colnames(ph_2018.b)[colnames(ph_2018.b) == "Row"] <- "row"
colnames(ph_2018.b)[colnames(ph_2018.b) == "genotype"] <- "Genotype"
head(ph_2018.b)
unique(ph_2018.b$Genotype)
ph_2018.b$meancw <- apply(ph_2018.b[, c("Cob.length.1", "Cob.length.2", "Cob.length.3", "Cob.length.4", "Cob.length.5", "Cob.length.6", "Cob.length.7", "Cob.Length.8")], 1, function(x){mean(x, na.rm=TRUE)})
ph_2018.b$Average.cob.length <- as.numeric(as.character(ph_2018.b$Average.cob.length))
plot(ph_2018.b$Average.cob.length, ph_2018.b$meancw)
idx <- which(round(ph_2018.b$Average.cob.length, 1) != round(ph_2018.b$meancw, 1))
cw[idx,]
#meta data for 2018
fb <- read.csv("../cache/fb2018_meta.csv")
fb$quadrant <- floor(fb$row/1000)
#View(fb)
#cw$row <- gsub("-.*", "", cw$Line.number)
#fb1 <- subset(fb, row %% 2 == 1)
#ph_2018.b$Row <- gsub("-.*", "", cw$Line.number)
fb1 <- subset(fb, row %% 2 == 1)
## remove duplicated rows
idx <- duplicated(ph_2018.b$row)
sub1 <- subset(ph_2018.b, row %in% ph_2018.b[idx,]$row)
cw1 <- subset(ph_2018.b, !(row %in% ph_2018.b[idx,]$row))
fb1cw <- merge(fb1, cw1[, c("row", "meancw")], by="row", all.x=TRUE)
View(fb1cw)
colnames(fb1cw)[colnames(fb1cw) == "pedigree"] <- "Pedigree"
colnames(fb1cw)[colnames(fb1cw) == "genotype"] <- "Genotype"
write.table(fb1cw[, -6], "../cache/pheno2018_coblength.csv", sep=",", row.names = FALSE, quote=FALSE)
write_xlsx(fb1cw, "../cache/pheno2018_cob_length.xlsx")
write.table(subset(fb1cw[, -6], nitrogen %in% "+N"), "../cache/pheno2018_cob_length_withN.csv", sep=",", row.names = FALSE, quote=FALSE)
write.table(subset(fb1cw[, -6], nitrogen %in% "-N"), "../cache/pheno2018_cob_length_noN.csv", sep=",", row.names = FALSE, quote=FALSE)
# how many of the non-check plots have no data
nonch <- subset(fb1cw, !(Genotype %in% "Check"))
sum(is.na(nonch$meancw))
nonch_data <- subset(nonch, !is.na(meancw))
t.test(subset(fb1cw, quadrant %in% "1")$meancw, subset(fb1cw, quadrant %in% "2")$meancw, na.rm=TRUE)
t.test(subset(fb1cw, quadrant %in% "3")$meancw, subset(fb1cw, quadrant %in% "4")$meancw, na.rm=TRUE)
library(ggplot2)
fsize=16
p1 <- ggplot(fb1cw, aes(x=meancw, color=as.factor(quadrant))) +
facet_grid(block ~ nitrogen) +
geom_histogram(bins=30) +
#labs(y=NULL, fill="Traits") + theme_bw() +
theme(#axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.text=element_text(size=12),
axis.title=element_text(size=fsize, face="bold"),
legend.title = element_text(size=fsize, face="bold"),
legend.text = element_text(size=fsize),
strip.text = element_text(size = fsize, face = "bold")) +
xlab("Cob Length") +
ylab("Frequency")
p1
fb <- read.csv("../cache/fb2019_meta_replaced_check.csv")
fb$quadrant <- floor(fb$row/1000)
#View(fb)
cw <- read.csv("../data/phenotyping_2019_semra_coblength_raw.csv")
table(cw$Number.of.ears)
View(cw)
cw$meancw <- apply(cw[, c("Cob.length.1", "Cob.length.2", "Cob.length.3", "Cob.length.4", "Cob.length.5", "Cob.length.6", "Cob.length.7", "Cob.length.8", "Cob.length.9")], 1, function(x){mean(x, na.rm=TRUE)})
#View(cw$meancw)
cw$meancw <- apply(cw[, 7:15], 1, function(x){mean(x, na.rm=TRUE)})
cw$Average.cob.length <- as.numeric(as.character(cw$Average.cob.length))
plot(cw$Average.cob.length, cw$meancw)
idx <- which(round(cw$Average.cob.length, 1) != round(cw$meancw, 1))
cw[idx,]
cw$row <- gsub("-.*", "", cw$Row.number)
fb1 <- subset(fb, row %% 2 == 1)
#View(fb1)
## remove duplicated rows
idx <- duplicated(cw$row)
sub1 <- subset(cw, row %in% cw[idx,]$row)
cw1 <- subset(cw, !(row %in% cw[idx,]$row))
dim(cw1)
#View(cw1)
fb1cw <- merge(fb1, cw1[, c("row", "meancw")], by="row", all.x=TRUE)
#View(fb1cw)
# Quality checking
# how many of the non-check plots have no data
nonch <- subset(fb1cw, !(Genotype %in% "Check"))
sum(is.na(nonch$meancw))
nonch_data <- subset(nonch, !is.na(meancw))
t.test(subset(fb1cw, quadrant %in% "1")$meancw, subset(fb1cw, quadrant %in% "2")$meancw, na.rm=TRUE)
t.test(subset(fb1cw, quadrant %in% "3")$meancw, subset(fb1cw, quadrant %in% "4")$meancw, na.rm=TRUE)
write.table(fb1cw[, -16], "../cache/pheno2019_cob_length.csv", sep=",", row.names = FALSE, quote=FALSE)
write_xlsx(fb1cw, "../cache/pheno2019_cob_length.xlsx")
write.table(subset(fb1cw[, -16], nitrogen %in% "+N"), "../cache/pheno2019_cob_length_withN.csv", sep=",", row.names = FALSE, quote=FALSE)
write.table(subset(fb1cw[, -16], nitrogen %in% "-N"), "../cache/pheno2019_cob_length_noN.csv", sep=",", row.names = FALSE, quote=FALSE)
# how many of the non-check plots have no data
nonch <- subset(fb1cw, !(Genotype %in% "Check"))
sum(is.na(nonch$meancw))
nonch_data <- subset(nonch, !is.na(meancw))
t.test(subset(fb1cw, quadrant %in% "1")$meancw, subset(fb1cw, quadrant %in% "2")$meancw, na.rm=TRUE)
t.test(subset(fb1cw, quadrant %in% "3")$meancw, subset(fb1cw, quadrant %in% "4")$meancw, na.rm=TRUE)
library(ggplot2)
fsize=16
p2 <- ggplot(fb1cw, aes(x=meancw, color=as.factor(quadrant))) +
facet_grid(block ~ nitrogen) +
geom_histogram(bins=30) +
#labs(y=NULL, fill="Traits") + theme_bw() +
theme(#axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.text=element_text(size=12),
axis.title=element_text(size=fsize, face="bold"),
legend.title = element_text(size=fsize, face="bold"),
legend.text = element_text(size=fsize),
strip.text = element_text(size = fsize, face = "bold")) +
xlab("Cob Lenght") +
ylab("Frequency")
p2
### first, we need to organize both data set. (they need to have the same columns)
coblength_2019_N <- read.csv("../cache/pheno2019_cob_length_withN.csv")
coblength_2018_N <- read.csv("../cache/pheno2018_cob_length_withN.csv")
#View(coblength_2019_N)
#View(coblength_2018_N)
coblength_18_19_N <- rbind(coblength_2018_N, coblength_2019_N)
View(coblength_18_19_N)
write.table(coblength_18_19_N, "../cache/cob_length_2018_2019_N.csv", sep=",", row.names = FALSE, quote=FALSE)
coblength_2018_noN <- read.csv ("../cache/pheno2018_cob_length_noN.csv")
coblength_2019_noN <- read.csv ("../cache/pheno2019_cob_length_noN.csv")
coblength_18_19_noN <- rbind (coblength_2018_noN, coblength_2019_noN)
write.table(coblength_18_19_noN, "../cache/cob_length_2018_2019_noN.csv", sep=",", row.names = FALSE, quote=FALSE)
library(lme4)
#p1 <- read.csv("cache/pheno2019_cw_withN.csv")
get_BLUP(data = coblength_18_19_N, model = meancw ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) + (1
| Genotype:year), which.factor = "Genotype",
outfile = "../cache/BLUP_RESULTS/cob_length_BLUP_2018_2019_withN_lme4.csv")
#df1 <- read.csv("cache/BLUP/CW_BLUP-2019_withN.csv")
nit <- read.csv("../cache/BLUP_RESULTS/cob_length_BLUP_2018_2019_withN_lme4.csv")
#cor.test(df1$BLUPs, df2$value)
#plot(df1$BLUPs, df2$value)
#noN
#p2 <- read.csv("cache/pheno2019_cw_noN.csv")
get_BLUP(data = coblength_18_19_noN, model = meancw ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) + (1
| Genotype:year), which.factor = "Genotype",
outfile = "../cache/BLUP_RESULTS/cob_length_BLUP_2018_2019_noN_lme4.csv")
nonit <- read.csv("../cache/BLUP_RESULTS/cob_length_BLUP_2018_2019_noN_lme4.csv")
#write.table(fb18[, -16:-17], "cache/fb2018_meta.csv", sep=",", row.names = FALSE, quote=FALSE)
#cor.test(df1$value[c(2:215)], df2$value[c(2:215)])
#plot(df1$value[c(2:215)], df2$value[c(2:215)])
hist(nit$value, breaks=25, col="#6495ed", xlab="Cob length in +N in 2018-2019", ylab="freq", main="histogram")
hist(nonit$value, breaks=25, col="#c6e2ff", xlab="Cob length in -N in 2018-2019", ylab="freq", main="histogram")
t.test(nit$value, nonit$value)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir=normalizePath('../../'))
library(readr)
kwh <- read.csv("cache/20_kernel_weight_2018_2019_N.csv.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir=normalizePath('../../'))
kwh <- read.csv("../cache/20_kernel_weight_2018_2019_N.csv.csv")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
kwh <- read.csv("../cache/20_kernel_weight_2018_2019_N.csv.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir=normalizePath('../../'))
kwh <- read.csv("/cache/20_kernel_weight_2018_2019_N.csv")
kwh <- read.csv("cache/20_kernel_weight_2018_2019_N.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir=normalizePath('../../'))
kwh <- read.csv("../cache/20_kernel_weight_2018_2019_N.csv")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
kwh <- read.csv("../cache/20_kernel_weight_2018_2019_N.csv")
kwh <- read.csv("../cache/20_kernel_weight_2018_2019_N.csv")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
library(readr)
kwh <- read.csv("../cache/20_kernel_weight_2018_2019_N.csv")
getwd()
kwh <- read.csv("cache/20_kernel_weight_2018_2019_N.csv")
head(kwh)
View(kwh)
class(kwh$Weight.of.20.seeds)
View(kwh)
head(kwh)
tail(kwh)
dim(kwh)
install.packages("tidyverse")
update.packages('rlang')
install.packages("devtools")
devtools::install_github("jyanglab/g3tools")
library("g3tools")
install.packages("scales")
install.packages("scales")
ls(getNamespace("g3tools"), all.names=FALSE)
options(stringsAsFactors = FALSE)
install.packages("devtools")
install.packages("devtools")
install.packages("Rtools")
library(devtools)
devtools::install_github("jyanglab/g3tools")
devtools::install_github("r-lib/devtools")
ls(getNamespace("g3tools"), all.names=FALSE)
help("get_BLUP")
help("get_H2")
pheno <- kwh
install.packages("Ime4")
library(lme4)
fit <- get_BLUP(data = pheno, model = Average.seed.weight ~ (1|Genotype) + (1|Replication), which.factor = "Genotype", outfile = "test.csv")
fit <- get_BLUP(data = pheno, model = Weight.of.20.seeds ~ (1|Genotype) + (1|Replication), which.factor = "Genotype", outfile = "test.csv")
fit <- get_BLUP(data = pheno, model = Weight.of.20.seeds ~ (1|Genotype) + (1|Rep), which.factor = "Genotype", outfile = "test.csv")
summary(fit)
vg=0.5684
ve=0.7131
H2 = vg/(vg+ve/2)
H2
fit <- get_BLUP(data = pheno, model = Weight.of.20.seeds ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) + (1
fit <- get_BLUP(data = pheno, model = Weight.of.20.seeds ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) + (1
fit <- get_BLUP(data = pheno, model = Weight.of.20.seeds ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) + (1
| Genotype:year), which.factor = "Genotype", outfile = "test.csv")
summary(fit)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
a <- get_BLUP(data = cob_weight_18_19_noN, model = Average.cob.weight ~ (1 | Genotype) + (1 | year) + (1 | block) + (1 | sb) + (1 | spb) + (1| Genotype:year), which.factor = "Genotype",
outfile = "../cache/BLUP_RESULTS/cob_weight_BLUP_2018_2019_noN_lme4.csv")
summary(a)
summary(fit)
H2 = vg/(vg+ve/2)
H2
vg = 0.538006
ve = 0.648557
H2 = vg/(vg+ve/2)
H2
summary(fit)
vg = 0.538006
ve = 0.648557
H2 = vg/(vg+ve/4)
H2 # 0.623931
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
df <- read.csv ("../data/Appendix_2a_Top5_18Sept2013.csv")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
df <- read.csv ("../data/Appendix_2a_Top5_18Sept2013.csv")
df <- read.csv ("/data/Appendix_2a_Top5_18Sept2013.csv")
df <- read.csv ("data/Appendix_2a_Top5_18Sept2013.csv")
df$Latitude <- as.numeric(as.character(df$Latitude))
View(df)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir=normalizePath('../../'))
df <- read.csv ("data/Appendix_2a_Top5_18Sept2013.csv")
df$Latitude <- as.numeric(as.character(df$Latitude))
range(df$Latitude, na.rm = T)
df$Longitude <- as.numeric(as.character(df$Longitude))
range(df$Longitude, na.rm = T)
library(ggmap)
install.packages("ggmap")
library(ggmap)
myloc <- c(-105, -40, 170, 56)
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df,
alpha = .9, size = 1, col="red")
library(plyr)
c <- ddply(df, .(Country.of.origin), nrow)
View(df)
c <- ddply(df, .(StateID), nrow)
c <- ddply(df, .(StateID), nrow)
c <- subset(c, StateID != "")
df2 <- merge(c, df[, c("StateID",  "Latitude", "Longitude")], by="StateID")
df2 <- df2[!duplicated(df2$StateID), ]
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df2,
alpha = .9, size = df2$V1/10, col="red")
head(df)
class(df$Latitude)
library(ggmap)
##lowerleftlon, lowerleftlat, upperrightlon, upperrightlat
myloc <- c(-124, 25, -68, 50)
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df,
alpha = .9, size = 1, col="red")
mymap <- get_map(location=myloc$Top5_Cd, source="stamen", crop=FALSE, color="bw")
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
##lowerleftlon, lowerleftlat, upperrightlon, upperrightlat
myloc <- c(-124, 25, -68, 50)
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df,
alpha = .9, size = 1, col="red")
library(plyr)
c <- ddply(df, .(StateID), nrow)
c <- subset(c, StateID != "")
df2 <- merge(c, df[, c("StateID",  "Latitude", "Longitude")], by="StateID")
df2 <- df2[!duplicated(df2$StateID), ]
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df2,
alpha = .9, size = df2$V1/10, col="red")
library(plyr)
c <- ddply(df, .(StateID), nrow)
c <- subset(c, StateID != "")
df2 <- merge(c, df[, c("StateID",  "Latitude", "Longitude")], by="StateID")
df2 <- df2[!duplicated(df2$StateID), ]
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df2,
alpha = .9, size = df2$V1/10, col="red")
c <- ddply(df, .(StateID), nrow)
head(c)
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df2,
alpha = .9, size = df2$V1/50, col="red")
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="Top5_Cd")
library(plyr)
c <- ddply(df, .(StateID), nrow)
head(c)
c <- subset(c, StateID != "")
df2 <- merge(c, df[, c("StateID",  "Latitude", "Longitude")], by="StateID")
df2 <- df2[!duplicated(df2$StateID), ]
mymap <- get_map(location=myloc, source="stamen", crop=FALSE, color="bw")
ggmap(mymap) +
geom_point(aes(x = Longitude, y = Latitude), data = df2,
alpha = .9, size = df2$V1/50, col="red")
